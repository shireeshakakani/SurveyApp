//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticePerformanceAssessmentDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PPASurvey_DBEntities : DbContext
    {
        public PPASurvey_DBEntities()
            : base("name=PPASurvey_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Practice> Practices { get; set; }
        public DbSet<Rule> Rules { get; set; }
        public DbSet<SectionMaster> SectionMasters { get; set; }
        public DbSet<Source_InputData> Source_InputData { get; set; }
        public DbSet<SubQuestion> SubQuestions { get; set; }
        public DbSet<SurveyQuestion> SurveyQuestions { get; set; }
        public DbSet<SurveyTbl> SurveyTbls { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Target_OutputData> Target_OutputData { get; set; }
        public DbSet<YearMaster> YearMasters { get; set; }
        public DbSet<Lookup_AcctRecDaysOutstanding> Lookup_AcctRecDaysOutstanding { get; set; }
        public DbSet<Lookup_AnnCLSalesPerCLExam> Lookup_AnnCLSalesPerCLExam { get; set; }
        public DbSet<Lookup_AnnGrossRevPerFTEOD__000_> Lookup_AnnGrossRevPerFTEOD__000_ { get; set; }
        public DbSet<Lookup_AnnMedEyeCareVisitPer1000> Lookup_AnnMedEyeCareVisitPer1000 { get; set; }
        public DbSet<Lookup_AnnMrktSpendPerComplExam> Lookup_AnnMrktSpendPerComplExam { get; set; }
        public DbSet<Lookup_AnnPharmRxPer1000> Lookup_AnnPharmRxPer1000 { get; set; }
        public DbSet<Lookup_AnnStaffHrsPerAnnODHrs> Lookup_AnnStaffHrsPerAnnODHrs { get; set; }
        public DbSet<Lookup_AvgCollectFeeRevPerCompl> Lookup_AvgCollectFeeRevPerCompl { get; set; }
        public DbSet<Lookup_BestPracticeFINANCE> Lookup_BestPracticeFINANCE { get; set; }
        public DbSet<Lookup_BestPracticeMARKETING> Lookup_BestPracticeMARKETING { get; set; }
        public DbSet<Lookup_BestPracticeSTAFF> Lookup_BestPracticeSTAFF { get; set; }
        public DbSet<Lookup_BestPracticeTOTAL> Lookup_BestPracticeTOTAL { get; set; }
        public DbSet<Lookup_ChairCostPerComplExam> Lookup_ChairCostPerComplExam { get; set; }
        public DbSet<Lookup_CLExamPercentTotalExam> Lookup_CLExamPercentTotalExam { get; set; }
        public DbSet<Lookup_CLGrossProfitMargin> Lookup_CLGrossProfitMargin { get; set; }
        public DbSet<Lookup_CLNewFitsPer100CLExam> Lookup_CLNewFitsPer100CLExam { get; set; }
        public DbSet<Lookup_CLRefitPercentCLExam> Lookup_CLRefitPercentCLExam { get; set; }
        public DbSet<Lookup_CLSalesPercentGrossRev> Lookup_CLSalesPercentGrossRev { get; set; }
        public DbSet<Lookup_CLWearerPercentActivePatients> Lookup_CLWearerPercentActivePatients { get; set; }
        public DbSet<Lookup_CompleteExamsPer100Active> Lookup_CompleteExamsPer100Active { get; set; }
        public DbSet<Lookup_CompleteExamsPerODHour> Lookup_CompleteExamsPerODHour { get; set; }
        public DbSet<Lookup_CostOfGoodsPercentOfGrossRev> Lookup_CostOfGoodsPercentOfGrossRev { get; set; }
        public DbSet<Lookup_DailyDisposableLensPercentSoft> Lookup_DailyDisposableLensPercentSoft { get; set; }
        public DbSet<Lookup_ExamFeeNonCL> Lookup_ExamFeeNonCL { get; set; }
        public DbSet<Lookup_ExamFeeSoftLensNOREFITT> Lookup_ExamFeeSoftLensNOREFITT { get; set; }
        public DbSet<Lookup_ExamFeeSoftNewFitMULTIFO> Lookup_ExamFeeSoftNewFitMULTIFO { get; set; }
        public DbSet<Lookup_ExamFeeSoftNewFitSPHERE> Lookup_ExamFeeSoftNewFitSPHERE { get; set; }
        public DbSet<Lookup_ExamFeeSoftNewFitTORIC> Lookup_ExamFeeSoftNewFitTORIC { get; set; }
        public DbSet<Lookup_EyewearGrossProfitMargin> Lookup_EyewearGrossProfitMargin { get; set; }
        public DbSet<Lookup_EyewearRxPer100ComplExam> Lookup_EyewearRxPer100ComplExam { get; set; }
        public DbSet<Lookup_EyewearSalePercentageOfGrossRev> Lookup_EyewearSalePercentageOfGrossRev { get; set; }
        public DbSet<Lookup_GrossRevenuePerCompleteExam> Lookup_GrossRevenuePerCompleteExam { get; set; }
        public DbSet<Lookup_GrossRevenuePerODHour> Lookup_GrossRevenuePerODHour { get; set; }
        public DbSet<Lookup_GrossRevPerActivePatient> Lookup_GrossRevPerActivePatient { get; set; }
        public DbSet<Lookup_GrossRevPerEyewearRx> Lookup_GrossRevPerEyewearRx { get; set; }
        public DbSet<Lookup_GrossRevPerNonODStaffHr> Lookup_GrossRevPerNonODStaffHr { get; set; }
        public DbSet<Lookup_GrossRevPerSqFt> Lookup_GrossRevPerSqFt { get; set; }
        public DbSet<Lookup_HighIndexLensPercentSpecLensRx> Lookup_HighIndexLensPercentSpecLensRx { get; set; }
        public DbSet<Lookup_ManagedCarePercentGrossRev> Lookup_ManagedCarePercentGrossRev { get; set; }
        public DbSet<Lookup_MedicalEyeCareVisitPercentTotal> Lookup_MedicalEyeCareVisitPercentTotal { get; set; }
        public DbSet<Lookup_MonthlySoftLensPercentWearers> Lookup_MonthlySoftLensPercentWearers { get; set; }
        public DbSet<Lookup_MrktSpendPercentGrossRev> Lookup_MrktSpendPercentGrossRev { get; set; }
        public DbSet<Lookup_MultipleEyewearPurchasePercent> Lookup_MultipleEyewearPurchasePercent { get; set; }
        public DbSet<Lookup_NetIncomePercentGrossRev> Lookup_NetIncomePercentGrossRev { get; set; }
        public DbSet<Lookup_NewPatientExamPercentTotalExam> Lookup_NewPatientExamPercentTotalExam { get; set; }
        public DbSet<Lookup_NoGlareLensPercentSpecLensRx> Lookup_NoGlareLensPercentSpecLensRx { get; set; }
        public DbSet<Lookup_NonRefrFeePercentGrossRev> Lookup_NonRefrFeePercentGrossRev { get; set; }
        public DbSet<Lookup_OccupancyExpensePercentGrossRev> Lookup_OccupancyExpensePercentGrossRev { get; set; }
        public DbSet<Lookup_PercentExamsProvideWMangCareDis> Lookup_PercentExamsProvideWMangCareDis { get; set; }
        public DbSet<Lookup_PercentOfNewPatientsAttracted> Lookup_PercentOfNewPatientsAttracted { get; set; }
        public DbSet<Lookup_PercentPatientsCLExamPurchEyewea> Lookup_PercentPatientsCLExamPurchEyewea { get; set; }
        public DbSet<Lookup_PhotochrLensPercentofSpecLensRx> Lookup_PhotochrLensPercentofSpecLensRx { get; set; }
        public DbSet<Lookup_ProgressiveLensAndPresbyopRx> Lookup_ProgressiveLensAndPresbyopRx { get; set; }
        public DbSet<Lookup_RecallMinPerComplExam> Lookup_RecallMinPerComplExam { get; set; }
        public DbSet<Lookup_SiliconeHydroLensWearPercentSoft> Lookup_SiliconeHydroLensWearPercentSoft { get; set; }
        public DbSet<Lookup_SoftMultiFocPercentSoftLens> Lookup_SoftMultiFocPercentSoftLens { get; set; }
        public DbSet<Lookup_SoftToricPercentSoftLens> Lookup_SoftToricPercentSoftLens { get; set; }
        public DbSet<Lookup_StaffExpensePercentOfGrossRev> Lookup_StaffExpensePercentOfGrossRev { get; set; }
        public DbSet<Lookup_WebsiteAnnualExpense> Lookup_WebsiteAnnualExpense { get; set; }
        public DbSet<SurveyTransaction> SurveyTransactions { get; set; }
        public DbSet<ExecutionDetail> ExecutionDetails { get; set; }
        public DbSet<ExecutionSummary> ExecutionSummaries { get; set; }
        public DbSet<Source_InputDataBenchMarkSource> Source_InputDataBenchMarkSource { get; set; }
        public DbSet<Source_InputDataSave> Source_InputDataSave { get; set; }
        public DbSet<Lookup_AnnualOccupancyCostperSquareFoot_J> Lookup_AnnualOccupancyCostperSquareFoot_J { get; set; }
        public DbSet<lookup_averageframesmarkup_j> lookup_averageframesmarkup_j { get; set; }
        public DbSet<Lookup_ComputerLensesPercentofEyeWearRxes_J> Lookup_ComputerLensesPercentofEyeWearRxes_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByCostOfGoods_J> Lookup_ExpenseRatioPercentageByCostOfGoods_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByEquipment_J> Lookup_ExpenseRatioPercentageByEquipment_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByGenOverhead_J> Lookup_ExpenseRatioPercentageByGenOverhead_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByInsurance_J> Lookup_ExpenseRatioPercentageByInsurance_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByInterest_J> Lookup_ExpenseRatioPercentageByInterest_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByMarketing_J> Lookup_ExpenseRatioPercentageByMarketing_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByOccupancy_J> Lookup_ExpenseRatioPercentageByOccupancy_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByRepairMaintenance_J> Lookup_ExpenseRatioPercentageByRepairMaintenance_J { get; set; }
        public DbSet<Lookup_ExpenseRatioPercentageByStaffSalaries_J> Lookup_ExpenseRatioPercentageByStaffSalaries_J { get; set; }
        public DbSet<Lookup_EyewearRxCostOfGoods_J> Lookup_EyewearRxCostOfGoods_J { get; set; }
        public DbSet<Lookup_FramesAvgWholesaleCostPerFrame_J> Lookup_FramesAvgWholesaleCostPerFrame_J { get; set; }
        public DbSet<Lookup_OpticalDispensaryPercentOfTotalOfficeSpace_J> Lookup_OpticalDispensaryPercentOfTotalOfficeSpace_J { get; set; }
        public DbSet<Lookup_OtherProductSales_J> Lookup_OtherProductSales_J { get; set; }
        public DbSet<Lookup_PercentofCompleteEyeExamsByCLExams_J> Lookup_PercentofCompleteEyeExamsByCLExams_J { get; set; }
        public DbSet<Lookup_PercentofCompleteEyeExamsByEyeGlass_J> Lookup_PercentofCompleteEyeExamsByEyeGlass_J { get; set; }
        public DbSet<Lookup_PercentofCompleteEyeExamsByHealthyEyeExams_J> Lookup_PercentofCompleteEyeExamsByHealthyEyeExams_J { get; set; }
        public DbSet<Lookup_PercentOfGrossRevenueAllHealthVisionPlans_J> Lookup_PercentOfGrossRevenueAllHealthVisionPlans_J { get; set; }
        public DbSet<Lookup_PercentOfGrossRevenueDirectPatientPayments_J> Lookup_PercentOfGrossRevenueDirectPatientPayments_J { get; set; }
        public DbSet<Lookup_PercentOfGrossRevenueFromMedicarePayments_J> Lookup_PercentOfGrossRevenueFromMedicarePayments_J { get; set; }
        public DbSet<Lookup_PercentOfGrossRevenueVSPPayments_J> Lookup_PercentOfGrossRevenueVSPPayments_J { get; set; }
        public DbSet<Lookup_PrescriptionSunwearPercentofEyeWearRxes_J> Lookup_PrescriptionSunwearPercentofEyeWearRxes_J { get; set; }
        public DbSet<Lookup_RGPLensWearerPercentOfCLWeares_J> Lookup_RGPLensWearerPercentOfCLWeares_J { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetPageSection(Nullable<byte> practiceId, Nullable<byte> yearId)
        {
            var practiceIdParameter = practiceId.HasValue ?
                new ObjectParameter("PracticeId", practiceId) :
                new ObjectParameter("PracticeId", typeof(byte));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPageSection", practiceIdParameter, yearIdParameter);
        }
    
        public virtual ObjectResult<GetQuestionData_Result> GetQuestionData(Nullable<int> practiceId, Nullable<short> yearId)
        {
            var practiceIdParameter = practiceId.HasValue ?
                new ObjectParameter("PracticeId", practiceId) :
                new ObjectParameter("PracticeId", typeof(int));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuestionData_Result>("GetQuestionData", practiceIdParameter, yearIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyData_Result> GetSurveyData(Nullable<int> practiceId)
        {
            var practiceIdParameter = practiceId.HasValue ?
                new ObjectParameter("PracticeId", practiceId) :
                new ObjectParameter("PracticeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyData_Result>("GetSurveyData", practiceIdParameter);
        }
    
        public virtual ObjectResult<InsertTranscation_Result> InsertTranscation(Nullable<int> surveyId, Nullable<int> yearId, Nullable<int> practiceId, string userName, Nullable<System.DateTime> entrydate, string detailedPath, string executivePath, string infographicPath, string cSVPath)
        {
            var surveyIdParameter = surveyId.HasValue ?
                new ObjectParameter("SurveyId", surveyId) :
                new ObjectParameter("SurveyId", typeof(int));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(int));
    
            var practiceIdParameter = practiceId.HasValue ?
                new ObjectParameter("PracticeId", practiceId) :
                new ObjectParameter("PracticeId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var entrydateParameter = entrydate.HasValue ?
                new ObjectParameter("Entrydate", entrydate) :
                new ObjectParameter("Entrydate", typeof(System.DateTime));
    
            var detailedPathParameter = detailedPath != null ?
                new ObjectParameter("DetailedPath", detailedPath) :
                new ObjectParameter("DetailedPath", typeof(string));
    
            var executivePathParameter = executivePath != null ?
                new ObjectParameter("ExecutivePath", executivePath) :
                new ObjectParameter("ExecutivePath", typeof(string));
    
            var infographicPathParameter = infographicPath != null ?
                new ObjectParameter("InfographicPath", infographicPath) :
                new ObjectParameter("InfographicPath", typeof(string));
    
            var cSVPathParameter = cSVPath != null ?
                new ObjectParameter("CSVPath", cSVPath) :
                new ObjectParameter("CSVPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertTranscation_Result>("InsertTranscation", surveyIdParameter, yearIdParameter, practiceIdParameter, userNameParameter, entrydateParameter, detailedPathParameter, executivePathParameter, infographicPathParameter, cSVPathParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SynchNewYearSurveyData_Result> SynchNewYearSurveyData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SynchNewYearSurveyData_Result>("SynchNewYearSurveyData");
        }
    
        public virtual ObjectResult<GetSurveyTranscation_Result> GetSurveyTranscation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyTranscation_Result>("GetSurveyTranscation");
        }
    
        public virtual int ExportSurveytoCSV(string path)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportSurveytoCSV", pathParameter);
        }
    
        public virtual ObjectResult<GetMasterCSVData_Result> GetMasterCSVData(Nullable<byte> practiceId, Nullable<byte> yearId)
        {
            var practiceIdParameter = practiceId.HasValue ?
                new ObjectParameter("PracticeId", practiceId) :
                new ObjectParameter("PracticeId", typeof(byte));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("YearId", yearId) :
                new ObjectParameter("YearId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterCSVData_Result>("GetMasterCSVData", practiceIdParameter, yearIdParameter);
        }
    
        public virtual ObjectResult<GetSurveyDataForSave_Result> GetSurveyDataForSave(Nullable<int> practiceId, string year, string name, string practiceName)
        {
            var practiceIdParameter = practiceId.HasValue ?
                new ObjectParameter("PracticeId", practiceId) :
                new ObjectParameter("PracticeId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var practiceNameParameter = practiceName != null ?
                new ObjectParameter("PracticeName", practiceName) :
                new ObjectParameter("PracticeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyDataForSave_Result>("GetSurveyDataForSave", practiceIdParameter, yearParameter, nameParameter, practiceNameParameter);
        }
    
        public virtual int SP_BenchMarkLogic(string lookupName, string year, string type)
        {
            var lookupNameParameter = lookupName != null ?
                new ObjectParameter("LookupName", lookupName) :
                new ObjectParameter("LookupName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BenchMarkLogic", lookupNameParameter, yearParameter, typeParameter);
        }
    
        public virtual int SP_PopulateAllBenchmarks(string lookupName, string year, string type)
        {
            var lookupNameParameter = lookupName != null ?
                new ObjectParameter("LookupName", lookupName) :
                new ObjectParameter("LookupName", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PopulateAllBenchmarks", lookupNameParameter, yearParameter, typeParameter);
        }
    }
}
